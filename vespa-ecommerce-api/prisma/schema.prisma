// file: vespa-ecommerce-api/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// ENUMS
// =================================

enum Role {
  ADMIN
  RESELLER
  MEMBER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

// =================================
// MODELS
// =================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders     Order[]
  reviews    Review[]
  wishlists  Wishlist[]
  addresses  Address[]
  tier       ResellerTier? @relation(fields: [resellerTierId], references: [id])
  resellerTierId String?
}

model ResellerTier {
  id                        String   @id @default(cuid())
  name                      String   @unique
  defaultDiscountPercentage Float    @default(0)
  minSpending               Float    @default(0)
  
  users             User[]
  categoryDiscounts TierCategoryDiscount[]
}

// Model baru untuk diskon fleksibel per kategori
model TierCategoryDiscount {
  id                 String   @id @default(cuid())
  discountPercentage Float
  
  tier               ResellerTier @relation(fields: [resellerTierId], references: [id])
  resellerTierId     String

  category           Category @relation(fields: [categoryId], references: [id])
  categoryId         String

  @@unique([resellerTierId, categoryId])
}

// Model baru untuk Merk
model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  logoUrl     String?
  products    Product[]
}

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images      ProductImage[]
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  brand       Brand?         @relation(fields: [brandId], references: [id])
  brandId     String?
  orderItems  OrderItem[]
  reviews     Review[]
  wishlists   Wishlist[]
  erpSyncLog  ErpSyncLog[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]

  tierDiscounts TierCategoryDiscount[]
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique @default(cuid())
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  shippingAddress String
  
  items           OrderItem[]
  payment         Payment?
  shipment        Shipment?
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
}

model Payment {
  id             String        @id @default(cuid())
  order          Order         @relation(fields: [orderId], references: [id])
  orderId        String        @unique
  amount         Float
  method         String
  status         PaymentStatus @default(PENDING)
  transactionId  String?
  proofOfPayment String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Shipment {
  id              String   @id @default(cuid())
  order           Order    @relation(fields: [orderId], references: [id])
  orderId         String   @unique
  courier         String
  trackingNumber  String?
  shippingCost    Float
  estimatedDelivery DateTime?
  createdAt       DateTime @default(now())
}

model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  province    String
  postalCode  String
  isDefault   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Voucher {
  id                String   @id @default(cuid())
  code              String   @unique
  description       String?
  discountValue     Float
  isPercentage      Boolean  @default(false)
  maxDiscountAmount Float?
  minPurchaseAmount Float    @default(0)
  validFrom         DateTime
  validUntil        DateTime
  maxUses           Int?
  usageCount        Int      @default(0)
  isActive          Boolean  @default(true)
}

model ErpSyncLog {
  id          String   @id @default(cuid())
  syncType    String
  status      String
  message     String?
  runAt       DateTime @default(now())
  product     Product? @relation(fields: [productId], references: [id])
  productId   String?
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}