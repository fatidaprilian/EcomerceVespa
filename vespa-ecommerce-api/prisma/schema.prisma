// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk peran pengguna
enum UserRole {
  ADMIN
  RESELLER
  MEMBER
}

// Model untuk tabel pengguna
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]

  @@map("users")
}

// Model untuk kategori produk
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  @@map("categories")
}

// Model untuk produk
model Product {
  id          String      @id @default(cuid())
  name        String
  slug        String      @unique // <-- SLUG SUDAH DITAMBAHKAN DI SINI
  sku         String      @unique
  description String?
  price       Decimal     @db.Decimal(12, 2)
  stock       Int         @default(0)
  images      String[]
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  wishlists   Wishlist[]

  @@map("products")
}

// --- Model-model Baru untuk E-commerce ---

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  totalAmount Decimal     @db.Decimal(12, 2)
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
  payment     Payment?
  shipment    Shipment?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(12, 2)

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Decimal       @db.Decimal(12, 2)
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  paymentProof  String?
  
  // KOLOM BARU UNTUK XENDIT
  externalId    String?       @unique // ID dari Xendit
  paymentUrl    String?       // URL invoice dari Xendit

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model Shipment {
  id             String         @id @default(cuid())
  orderId        String         @unique
  order          Order          @relation(fields: [orderId], references: [id])
  trackingNumber String?
  courier        String
  shippingCost   Decimal        @db.Decimal(12, 2)
  status         ShipmentStatus @default(PROCESSING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("shipments")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@unique([productId, userId])
  @@map("reviews")
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("wishlists")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum ShipmentStatus {
  PROCESSING
  SHIPPED
  DELIVERED
}