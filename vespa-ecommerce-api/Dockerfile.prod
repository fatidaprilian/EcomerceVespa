# Security: Use a specific version of Node.js on Alpine Linux
FROM node:22.12.0-alpine AS builder

# Security: Update and upgrade base packages
RUN apk update && apk upgrade

# Set the working directory
WORKDIR /app

# Set build-time environment variables
ENV NODE_ENV=production

# Copy package files
COPY package*.json ./

# Install ALL dependencies (remove --ignore-scripts to ensure all binaries are installed)
RUN npm ci

# Copy the rest of the application source code
COPY . .

# Add node_modules/.bin to the PATH for subsequent commands
ENV PATH=/app/node_modules/.bin:$PATH

# Generate Prisma Client
RUN npx prisma generate

# Build the application - try multiple approaches
RUN if [ -f "node_modules/.bin/nest" ]; then \
    ./node_modules/.bin/nest build; \
    elif [ -f "node_modules/@nestjs/cli/bin/nest.js" ]; then \
    node node_modules/@nestjs/cli/bin/nest.js build; \
    else \
    npm run build; \
    fi

# After the build is complete, remove devDependencies to lighten the layer
RUN npm prune --production

# --- Production stage ---
# Start fresh from a clean Node.js image
FROM node:22.12.0-alpine AS production

# Security: Install essential tools and update
RUN apk update && apk upgrade && \
    apk add --no-cache dumb-init curl && \
    rm -rf /var/cache/apk/*

# Set environment for production
ENV NODE_OPTIONS="--max-old-space-size=512"
ENV NODE_ENV=production

# Security: Create a non-root user for running the application
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001 -G nodejs

# Set the working directory for the production stage
WORKDIR /app

# Copy the built application, Prisma files, and production node_modules from the builder stage
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nestjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nestjs:nodejs /app/package.json ./

# Copy and grant execution permission to the entrypoint script
COPY --chown=nestjs:nodejs ./entrypoint.sh ./entrypoint.sh
RUN chmod +x ./entrypoint.sh

# Switch to the non-root user
USER nestjs

# Expose the port the application will run on
EXPOSE 4000
ENV PORT=4000

# Health check to ensure the application is running
HEALTHCHECK --interval=30s --timeout=5s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:4000 || exit 1

# Metadata labels
LABEL maintainer="fatidaprilian" \
    version="1.0" \
    description="Vespa E-commerce API"

# Set the entrypoint to our custom script
ENTRYPOINT ["./entrypoint.sh"]

# The main command to start the app, executed by the entrypoint script
CMD ["dumb-init", "--", "node", "dist/main"]